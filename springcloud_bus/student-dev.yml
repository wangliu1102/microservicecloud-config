spring:
  cloud:
    bus:
      trace:
        enabled: true # 开启跟踪总线事件
  #rabbitmq配置
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  datasource:
    # 数据库驱动
    driver-class-name: com.mysql.cj.jdbc.Driver
    # druid连接池
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/clouddb01?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: 123456
    # 数据源其他配置
    druid:
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 5
      #	最小连接池数量
      min-idle: 5
      # 最大连接池数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      #Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。
      min-evictable-idle-time-millis: 300000
      #	用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。在mysql中通常为select 'x'，在oracle中通常为select 1 from dual
      validation-query: SELECT 'x'
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      #	是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。
      pool-prepared-statements: true
      # 指定每个连接上PSCache的大小
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat、日志用的filter:log4j、防御sql注入的filter:wall
      filters: stat,wall
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

mybatis-plus:
  mapper-locations: classpath*:com/wl/springcloud/**/mapping/*.xml
  global-config:
    banner: false # 是否控制台 print mybatis-plus 的 LOGO
    db-config:
      # 主键类型 auto:数据库ID自增 input:用户输入ID id_worker:全局唯一ID(数字类型唯一ID) uuid:全局唯一ID(UUID) id_worker_str:全局唯一ID(字符串类型唯一ID) none:
      id-type: auto
      #字段策略 default:默认,ignored:"忽略判断",not_null:"非 NULL 判断",not_empty:"非空判断"
      field-strategy: not_null
      # 默认数据库表下划线命名
      table-underline: true
      # 逻辑删除配置
      # 逻辑删除全局值（1表示已删除，这也是Mybatis Plus的默认配置）
      logic-delete-value: 1
      # 逻辑未删除全局值（0表示未删除，这也是Mybatis Plus的默认配置）
      logic-not-delete-value: 0
      db-type: mysql
  configuration:
    map-underscore-to-camel-case: true # 开启驼峰命名转换

feign:
  hystrix:
    enabled: true

#tx-lcn:
#  # 是否启动LCN负载均衡策略(优化选项，开启与否，功能不受影响)
#  ribbon:
#    loadbalancer:
#      dtx:
#        enabled: true
#  client:
#    # tx-manager 的配置地址，可以指定TM集群中的任何一个或多个地址
#    # tx-manager 下集群策略，每个TC都会从始至终<断线重连>与TM集群保持集群大小个连接。
#    # TM方，每有TM进入集群，会找到所有TC并通知其与新TM建立连接。
#    # TC方，启动时按配置与集群建立连接，成功后，会再与集群协商，查询集群大小并保持与所有TM的连接
#    manager-address: 127.0.0.1:8070
#    # 调用链长度等级，默认值为3（优化选项。系统中每个请求大致调用链平均长度，估算值。）
#    chain-level: 3
#    # 该参数为tc与tm通讯时的最大超时时间，单位ms。该参数不需要配置会在连接初始化时由tm返回。
#    tm-rpc-timeout: 2000
#    # 该参数为分布式事务的最大时间，单位ms。该参数不允许TC方配置，会在连接初始化时由tm返回。
#    dtx-time: 8000
#    # 该参数为雪花算法的机器编号，所有TC不能相同。该参数不允许配置，会在连接初始化时由tm返回。
#    machine-id: 1
#    # 该参数为事务方法注解切面的orderNumber，默认值为0.
#    dtx-aspect-order: 0
#    # 该参数为事务连接资源方法切面的orderNumber，默认值为0.
#    resource-order: 0
#  # 该参数是分布式事务框架存储的业务切面信息。采用的是h2数据库。绝对路径。该参数默认的值为{user.dir}/.txlcn/{application.name}-{application.port}
#  aspect:
#    log:
#      file-path: logs/.txlcn/demo-8080
#  # 是否开启日志记录。当开启以后需要配置对应logger的数据库连接配置信息。
#  logger:
#    enabled: false
#    driver-class-name: ${spring.datasource.driver-class-name}
#    jdbc-url: ${spring.datasource.url}
#    username: ${spring.datasource.username}
#    password: ${spring.datasource.password}

#tm:
#  manager:
#    url: http://127.0.0.1:8070/tx/manager/
#设置日志等级为debug等级，这样方便追踪排查问题
logging:
  level:
    com:
      codingapi: debug
tx-lcn:
  client:
    manager-address: 127.0.0.1:8070
# 暴露监控端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
word: zhangsan
